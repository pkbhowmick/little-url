// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package urlgen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyGenClient is the client API for KeyGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyGenClient interface {
	GenerateKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Key, error)
}

type keyGenClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyGenClient(cc grpc.ClientConnInterface) KeyGenClient {
	return &keyGenClient{cc}
}

func (c *keyGenClient) GenerateKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/urlgen.KeyGen/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyGenServer is the server API for KeyGen service.
// All implementations must embed UnimplementedKeyGenServer
// for forward compatibility
type KeyGenServer interface {
	GenerateKey(context.Context, *empty.Empty) (*Key, error)
	mustEmbedUnimplementedKeyGenServer()
}

// UnimplementedKeyGenServer must be embedded to have forward compatible implementations.
type UnimplementedKeyGenServer struct {
}

func (UnimplementedKeyGenServer) GenerateKey(context.Context, *empty.Empty) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedKeyGenServer) mustEmbedUnimplementedKeyGenServer() {}

// UnsafeKeyGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyGenServer will
// result in compilation errors.
type UnsafeKeyGenServer interface {
	mustEmbedUnimplementedKeyGenServer()
}

func RegisterKeyGenServer(s grpc.ServiceRegistrar, srv KeyGenServer) {
	s.RegisterService(&KeyGen_ServiceDesc, srv)
}

func _KeyGen_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyGenServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlgen.KeyGen/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyGenServer).GenerateKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyGen_ServiceDesc is the grpc.ServiceDesc for KeyGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlgen.KeyGen",
	HandlerType: (*KeyGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _KeyGen_GenerateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/url_gen/urlgen/url_gen.proto",
}
